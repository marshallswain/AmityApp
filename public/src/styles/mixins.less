.gradient(@color: #F5F5F5, @start: #EEE, @stop: #FFF) {
  background: @color;
  background: -webkit-gradient(linear,
  left bottom,
  left top,
  color-stop(0, @start),
  color-stop(1, @stop));
  background: -ms-linear-gradient(bottom,
  @start,
  @stop);
  background: -moz-linear-gradient(center bottom,
  @start 0%,
  @stop 100%);
  background: -o-linear-gradient(@stop,
  @start);
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@stop,@start));
}
.bw-gradient(@color: #F5F5F5, @start: 0, @stop: 255) {
  background: @color;
  background: -webkit-gradient(linear,
  left bottom,
  left top,
  color-stop(0, rgb(@start,@start,@start)),
  color-stop(1, rgb(@stop,@stop,@stop)));
  background: -ms-linear-gradient(bottom,
  rgb(@start,@start,@start) 0%,
  rgb(@stop,@stop,@stop) 100%);
  background: -moz-linear-gradient(center bottom,
  rgb(@start,@start,@start) 0%,
  rgb(@stop,@stop,@stop) 100%);
  background: -o-linear-gradient(rgb(@stop,@stop,@stop),
  rgb(@start,@start,@start));
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",rgb(@stop,@stop,@stop),rgb(@start,@start,@start)));
}
.bordered(@top-color: #EEE, @right-color: #EEE, @bottom-color: #EEE, @left-color: #EEE) {
  border-top: solid 1px @top-color;
  border-left: solid 1px @left-color;
  border-right: solid 1px @right-color;
  border-bottom: solid 1px @bottom-color;
}
.drop-shadow(@x-axis: 0, @y-axis: 1px, @blur: 2px, @alpha: 0.1) {
  -webkit-box-shadow: @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
  -moz-box-shadow: @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
  box-shadow: @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
}
.rounded(@radius: 2px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
}
.border-radius(@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0) {
  -webkit-border-top-right-radius: @topright;
  -webkit-border-bottom-right-radius: @bottomright;
  -webkit-border-bottom-left-radius: @bottomleft;
  -webkit-border-top-left-radius: @topleft;
  -moz-border-radius-topright: @topright;
  -moz-border-radius-bottomright: @bottomright;
  -moz-border-radius-bottomleft: @bottomleft;
  -moz-border-radius-topleft: @topleft;
  border-top-right-radius: @topright;
  border-bottom-right-radius: @bottomright;
  border-bottom-left-radius: @bottomleft;
  border-top-left-radius: @topleft;
  .background-clip(padding-box);
}
.opacity(@opacity: 0.5) {
  -moz-opacity: @opacity;
  -khtml-opacity: @opacity;
  -webkit-opacity: @opacity;
  opacity: @opacity;
  @opperc: @opacity * 100;
  -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{opperc})";
  filter: ~"alpha(opacity=@{opperc})";
}
.transition-duration(@duration: 0.2s) {
  -moz-transition-duration: @duration;
  -webkit-transition-duration: @duration;
  -o-transition-duration: @duration;
  transition-duration: @duration;
}
.transform(...) {
  -webkit-transform: @arguments;
  -moz-transform: @arguments;
  -o-transform: @arguments;
  -ms-transform: @arguments;
  transform: @arguments;
}
.rotation(@deg:5deg){
  .transform(rotate(@deg));
}
.scale(@ratio:1.5){
  .transform(scale(@ratio));
}
.transition(@duration:0.2s, @ease:ease-out) {
  -webkit-transition: all @duration @ease;
  -moz-transition: all @duration @ease;
  -o-transition: all @duration @ease;
  transition: all @duration @ease;
}
.inner-shadow(@horizontal:0, @vertical:1px, @blur:2px, @alpha: 0.4) {
  -webkit-box-shadow: inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
  -moz-box-shadow: inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
  box-shadow: inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
}
.box-shadow(@arguments) {
  -webkit-box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  box-shadow: @arguments;
}
.box-sizing(@sizing: border-box) {
  -ms-box-sizing: @sizing;
  -moz-box-sizing: @sizing;
  -webkit-box-sizing: @sizing;
  box-sizing: @sizing;
}
.user-select(@argument: none) {
  -webkit-user-select: @argument;
  -moz-user-select: @argument;
  -ms-user-select: @argument;
  user-select: @argument;
}
.columns(@colwidth: 250px, @colcount: 0, @colgap: 50px, @columnRuleColor: #EEE, @columnRuleStyle: solid, @columnRuleWidth: 1px) {
  -moz-column-width: @colwidth;
  -moz-column-count: @colcount;
  -moz-column-gap: @colgap;
  -moz-column-rule-color: @columnRuleColor;
  -moz-column-rule-style: @columnRuleStyle;
  -moz-column-rule-width: @columnRuleWidth;
  -webkit-column-width: @colwidth;
  -webkit-column-count: @colcount;
  -webkit-column-gap: @colgap;
  -webkit-column-rule-color: @columnRuleColor;
  -webkit-column-rule-style: @columnRuleStyle;
  -webkit-column-rule-width: @columnRuleWidth;
  column-width: @colwidth;
  column-count: @colcount;
  column-gap: @colgap;
  column-rule-color: @columnRuleColor;
  column-rule-style: @columnRuleStyle;
  column-rule-width: @columnRuleWidth;
}
.translate(@x:0, @y:0) {
  .transform(translate(@x, @y));
}
.background-clip(@argument: padding-box) {
  -moz-background-clip: @argument;
  -webkit-background-clip: @argument;
  background-clip: @argument;
}

//https://gist.github.com/ScottPolhemus/5730797

//
// LESS Utility Mixins
// -------------------

// Fill the parent element
.fill(@spacing: 0) {
  position: absolute;
  top: @spacing; bottom: @spacing;
  left: @spacing; right: @spacing;
}

// Set all active states at once
.active(@rules) {
  &:hover,
  &:focus,
  &:active,
  &.active {
  @rules();
  }
}

// Justify for responsive layout
// http://www.barrelny.com/blog/text-align-justify-and-rwd/
.justify() {
  text-align: justify;

  &:after{
    content: '';
    display: inline-block;
    width: 100%;
  }

  > * {
    display: inline-block;
    vertical-align: top;
    text-align: left;
  }
}

// Aspect ratio
// (Apply to container)
// http://www.mademyday.de/css-height-equals-width-with-pure-css.html
.aspect-ratio(@w, @h) {
  @ratio: (@h / @w);

  &:before {
    content: "";
    display: block;
    padding-top: (100% * @ratio);
  }

  > * {
    .fill;
  }
}



// Disable default form input appearance in Webkit & FF
.appearance(@appearance: none) {
  -webkit-appearance: @appearance;
  -moz-appearance: @appearance;
  appearance: @appearance;
}

// Combo width/height media queries
.screen-min(@size, @rules) {
  @media (min-width: @size), (min-height: @size) {
  @rules();
  }
}
.screen-max(@size, @rules) {
  @media (max-width: @size), (max-height: @size) {
  @rules();
  }
}


.font-smoothing(@value) when (@value = on) {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.font-smoothing(@value) when (@value = off) {
  -webkit-font-smoothing: subpixel-antialiased;
  -moz-osx-font-smoothing: auto;
}


.m-transition (@prop: all, @time: 1s, @ease: linear) {
  -webkit-transition: @prop @time @ease;
  transition: @prop @time @ease;
}

.card-shadow {
  box-shadow: 0 0.1em 0.25em rgba(0, 0, 0, 0.1), 0 0.1em 0.2em rgba(0, 0, 0, 0.1);
}




// Generator for top shadow
.z-depth-top(@depth: 1) {
  @color:    .12, .19, .19, .21, .22;
  @offset-y: 2px, 6px, 17px, 25px, 40px;
  @blur:     10px, 20px, 50px, 55px, 77px;

  box-shadow+: 0 extract(@offset-y, @depth) extract(@blur, @depth) rgba(0, 0, 0, extract(@color, @depth));
}

// Generator for bottom shadow
.z-depth-bottom(@depth: 1) {
  @color:    .16, .2, .24, .22, .2;
  @offset-y: 2px, 8px, 12px, 16px, 27px;
  @blur:     5px, 17px, 15px, 28px, 24px;

  box-shadow+: 0 extract(@offset-y, @depth) extract(@blur, @depth) rgba(0, 0, 0, extract(@color, @depth));
}

// Generator for top and bottom shadow
.z-depth(@depth: 1) {
  .z-depth-bottom(@depth);
  .z-depth-top(@depth);
}

// Generator animation hover and focus effect
.z-depth-animation(@depth, @orientation: full) {
  &:hover,
  &:focus {
    & when (@orientation = full) {
      .z-depth(@depth);
    }

    & when (@orientation = top) {
      .z-depth-top(@depth);
    }

    & when (@orientation = bottom) {
      .z-depth-bottom(@depth);
    }
  }
}


// Classes
// ------------------------------------
.z-depth-class(@animation: true, @time: .28s, @function: cubic-bezier(.4, 0, .2, 1)) {

  // Generator for shadow classes
  .generate-depth-class(@i: 1, @count) when (@i =< @count) {
    &-@{i} {
      .z-depth(@i);

      &-top {
        .z-depth-top(@i);
      }

      &-bottom {
        .z-depth-bottom(@i);
      }
    }

    .generate-depth-class(@i + 1, @count);
  }

  .generate-depth-class(1, 5);

  // z-depth-animation
  &-animation when (@animation = true) {
    .z-depth-1,
    .z-depth-2,
    .z-depth-3,
    .z-depth-4,
    .z-depth-5 {
      transition: box-shadow @time @function;
    }
  }
}