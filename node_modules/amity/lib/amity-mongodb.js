var q = require('q');
var MongoClient = require('mongodb').MongoClient;
var feathersMongoDBs = require('./feathers-mongo-databases');
var feathersMongoColls = require('./feathers-mongo-collections');
var feathersMongo = require('feathers-mongodb');

/**
 * Amity-MongoDB connects to a MongoDB server and uses several Feathers
 * service types to manage either the entire server (multiple databases)
 * or a single database.
 *
 * The modules used are as follows:
 *   feathers-mongo-databases   - to manage databases on the server
 *   feathers-mongo-collections - to manage collections in those databases
 *   feathers-mongodb           - to manage documents in each collection
 *   feathers-mongo-users       - to manage user permissions
 *
 *
 * Each instance will manage as much as one server.
 *
 * @param  {Object} config - Can be either the hostname of the server or the
 *                         server connection details. The app will
 *                         connect to this MongoDB server with the supplied
 *                         credentials.
 * @return {Object}  An Adapter to be registered on the Amity app.
 */

var amityMongo = {
	type:'server',
	namespace:'',
	amity_dbManager:[],
	amity_collManager:[],
	amity_collections:[],
	amity_users:[]
};

module.exports = function(config) {

	var deferred = q.defer();

	// If a connection string was passed.
	if (typeof config == 'string') {

		// Get a list of the servers.
		MongoClient.connect(config, function(err, db) {
			amityMongo.namespace = db.serverConfig.host + ':' + db.serverConfig.port;
		  console.log("Connected to server");

		  adminDB = db.admin();

		  // Add the db manager to the list of amity_ services.
		  amityMongo.amity_dbManager.push({'name':'_databases', service:feathersMongoDBs(db)});

		  // Get a list of databases to register collection managers on.
		  adminDB.listDatabases(function(err, dbs){
			  amityMongo.databases = dbs.databases;

			  // Loop through the list of databases...
			  for (var i = dbs.databases.length - 1; i >= 0; i--) {

			  	var currentDB = dbs.databases[i];
			  	// ...and ready a service for managing the collections on the currentDB.
			  	var options = {
			  		name:currentDB.name + '/_collections',
			  		service:feathersMongoColls(db, currentDB.name)
			  	};
			  	amityMongo.amity_collManager.push(options);

					// Use these for the async function to track when it's done.
			  	var index = 0;
			  	var targetIndex = dbs.databases.length  - 1;
			  	var databaseName;

			  	// Get the collections from each database.
			  	var changeDB = db.db(currentDB.name);
			  	changeDB.listCollections().toArray(function(err, collections) {
			  		for (var n = 0; n < collections.length; n++) {
			  	  	// Prep the collection name.
			  	  	var colName = collections[n].name.split('.');
			  	  	var dbName = colName.shift();
			  	  	if (databaseName !== dbName) {
			  	  		databaseName = dbName;
			  	  		index++;
			  	  	}
			  	  	colName = colName.join('.');
			  	  	// console.log(colName);
			  	  	options = {
			  	  		name:dbName + '/' + colName,
			  	  		service:feathersMongo({collection:colName})
			  	  	};
					  	// amityMongo.amity_collections.push(options);

			  	  	// If we're done looping, resolve the deferred.
			  	  	if (n === collections.length - 1 && index === targetIndex) {
			  	  		deferred.resolve(amityMongo);
			  	  	}
			  	  };


			  	});

			  };

		  });
		});

	// If an object was passed...
	// TODO: Make it possible to connect to MongoDB by passing an object.
	} else if(typeof config == 'object'){
		// ... create a connection string

		// If a custom collection name for servers was given...
		if (config.userCollection) {
			amityMongo.servers = config.serverCollection;
		}

		// If a custom collection name for users was given...
		if (config.userCollection) {
			amityMongo.users = config.userCollection;
		}

	} else {
		console.log('not connecting to anything.');
	}

	// This deferred must resolve with the fully-connected adapter.
	return deferred.promise;

	//Set up database
	// var host = config.mongodb.server || 'localhost';
	// var port = config.mongodb.port || mongodb.Connection.DEFAULT_PORT;
	// var dbOptions = {
	//   auto_reconnect: config.mongodb.autoReconnect,
	//   poolSize: config.mongodb.poolSize
	// };

	// var dbServer = new mongodb.Db('local', new mongodb.Server(host, port, dbOptions), {safe:true});

	// dbServer.open(function(err, db){
	// 	db.admin(function(err, adminDb) {
	// 	  // // Set the database
	// 	  // TODO: Get the db out for the rest of the app to use.
	// 	  // mongoServer.attr('admin', a);
	// 	  if (config.mongodb.adminUsername.length == 0) {
	// 	    console.log('Admin Database connected 1');
	// 	  } else {
	// 	    // Auth details were supplied, authenticate admin account with them
	// 	    adminDb.authenticate(config.mongodb.adminUsername, config.mongodb.adminPassword, function(err, result) {
	// 	      if (err) {
	// 	        //TODO: handle error
	// 	        console.error(err);
	// 	      }
	// 	      console.log('Admin Database connected 2');
	// 	    });
	// 	  }
	// 	});
	// });

	// var dbService = require('feathers-mongo-database')(dbServer, config);
	// var api = require('./api');

	//Routes
	// app.get(config.site.baseUrl+'api/databases', api.databases);

	// return dbService;
};
