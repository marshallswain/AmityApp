var amityMongo = require('./amity-mongodb');

var serverTemplate = {
	hostname:'host.com',
	type:'MongoDB',
};




var amity = {

	// This is just a placeholder for the Feathers app that is passed to start().
	app:null,

	// The prefix added to all API endpoints that this Amity instance manages.
	// You'll eventually be able to use this for API versioning.
	// TODO: Enable API versioning by setting up each Amity as its own instance.
	apiPrefix:'api',

	// A list containing host names with ports for each managed server.
	// When adapters are registered with use(), they are added here.
	servers:[],

	// The mongodb adapter comes bundled here for easy reference.
	mongodb: amityMongo,

	/**
	 * Register a server store. This is a feathers service that will store
	 * details about configured servers.  Only needs to be used if you
	 * will be storing users and servers separately.
	 */
	setServerStore : function(serverStore){
		// Set up Amity servers storage.
		if (serverStore) {
			amity.app.use('/api/amity/servers', serverStore);
		} else {
			throw new Error('No storage service was configured for Amity servers.');
		}
	},

	/**
	 * Register a user store. This is a feathers service that will store
	 * authentication details for each user.  Only needs to be used if you
	 * will be storing users and servers separately.
	 */
	setUserStore: function(userStore){
		// Set up Amity users storage.
		if (userStore) {
			amity.app.use('/api/amity/users', userStore);
		} else {
			throw new Error('No storage service was configured for Amity users.');
		}
	},

	/**
	 * A shortcut function that will use the provided amity adapter to
	 * initialize both the server store and the user store.
	 */
	setStore: function(storeDef){
		var self = this;

		storeDef.then(function(store){

			// Make sure the store is a server adapter.
			if(store.type.toLowerCase() === 'server'){

				// First, set up the adapter.
				self.use(store);

				// Then specify the servers store

				// and finally specify the users store


				// Set up the collections.
				var users = store.users || 'amity_users';
				var servers = store.servers || 'amity_servers';

				// this.setServerStore(store, users);
				// this.setUserStore(store, users);

			// If it wasn't an adapter of type 'server'...
			} else {
				var message = 'When using a single argument, please' +
					'provide a SERVER adapter as the store. You have passed a ' +
					store.type + ' adapter.';
				console.error(message);
			}
		});

		return this;
	},

	/**
	 * Set up the feathers services on the provided adapter.
	 *
	 * It essentially finds any keys that begin with 'amity_' and loops through
	 * the contained array of key-value pairs, setting up the key as the address
	 * namespace and the value is the service.
	 *
	 * An Amity adapter should already specify what type of feathers service
	 * to put on each object.
	 *
	 * @param  {[type]} adapter - An Amity adapter.
	 * @return {this}
	 */
	use: function(adapter){
		var self = this;

		// Put basic information into the server list. This will be public, so only
		// non-sensitive information is allowed.
		var server = {
			name: adapter.namespace,
			endpoint: self.apiPrefix + '/' + adapter.namespace,
			type:adapter.dbType
		};
		this.servers.push(server);

		// Make sure an object was passed.
		if (typeof adapter !== 'object') {
			console.error('This is not an Amity adapter object.');
		}

		// Get the keys that begin with amity_.
		var keys = Object.keys(adapter);
		for (var i = keys.length - 1; i >= 0; i--) {
			if (keys[i].indexOf('amity_') !== 0) {
				keys.splice(i, 1);
			}
		}

		keys.forEach(function(key, n){
			adapter[key].forEach(function(el, index) {
				var endpoint = self.apiPrefix + '/' + adapter.namespace + '/' + el.name;
				self.app.use(endpoint, el.service);
			});
		});
	},

	/**
	 * Export Amity settings through browser download.
	 *
	 * @return {Object} An object literal containing all stored database settings.
	 *                     Maybe it should be a file...
	 */
	exportServers: function(){},

	/**
	 * Save a backup copy of stored Amity settings.
	 */
	backupServers: function(){}

};

// A service to inform as to which top-level API namespaces are in use.
var serverService = {
	find: function(params, callback) {
	  callback(null, amity.servers);
	}
};

exports.mongodb = require('./amity-mongodb');

/**
 * Sets up where Amity stores its configuration and settings.
 * @param  {app} app  The Feathers app - The config services will be
 *                    set up on the api/amity/... namespace.
 * @return {Amity Object}  The main Amity instance.
 */
exports.start = function(app, config, store, userStore){

	// If a prefix was given...
	if (config.apiPrefix) {
		// ...put the prefix in place.
		amity.apiPrefix = config.apiPrefix;
	}

	// Make sure the feathers app was provided.
	if (!app) {
    throw new Error('No Feathers app was provided.');
	}
	amity.app = app;

	// If there's only a store passed in...
	if (store && !userStore) {
		// Use it as both the server and user store.
		amity.setStore(store);
	}

	app.use('/servers', serverService);

	return amity;
};

